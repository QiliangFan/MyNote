<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <link href="../Styles/style0002.css" rel="stylesheet" type="text/css"/>
<link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
<h2 class="calibre15" id="nav_point_67">9.1  聚集函数</h2><p class="calibre2">我们经常需要汇总数据而不用把它们实际检索出来，为此SQL提供了专门的函数。使用这些函数，SQL查询可用于检索数据，以便分析和报表生成。这种类型的检索例子有：</p>

<ul class="calibre8">
<li class="calibre9">确定表中行数（或者满足某个条件或包含某个特定值的行数）；</li>
<li class="calibre9">获得表中某些行的和；</li>
<li class="calibre9">找出表列（或所有行或某些特定的行）的最大值、最小值、平均值。</li>
</ul>

<p class="calibre2">上述例子都需要汇总表中的数据，而不需要实际数据本身。因此，返回实际表数据纯属浪费时间和处理资源（更不用说带宽了）。再说一遍，我们实际想要的是汇总信息。</p>

<p class="calibre2">为方便这种类型的检索，SQL给出了5个聚集函数，见表9-1。这些函数能进行上述检索。与前一章介绍的数据处理函数不同，SQL的聚集函数在各种主要SQL实现中得到了相当一致的支持。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">聚集函数（aggregate function）</strong>
   对某些行运行的函数，计算并返回一个值。</p>
</blockquote>

<p class="calibre2"><strong class="calibre3">表9-1  SQL聚集函数</strong></p>

<table class="table">
   <tr class="calibre16">
      <th class="calibre17">函　　数</th>
      <th class="calibre17">说　　明</th>
   </tr>
   <tr class="calibre18">
      <td class="calibre19">AVG()</td>
      <td class="calibre19">返回某列的平均值</td>
   </tr>
   <tr class="calibre16">
      <td class="calibre19">COUNT()</td>
      <td class="calibre19">返回某列的行数</td>
   </tr>
   <tr class="calibre18">
      <td class="calibre19">MAX()</td>
      <td class="calibre19">返回某列的最大值</td>
   </tr>
   <tr class="calibre16">
      <td class="calibre19">MIN()</td>
      <td class="calibre19">返回某列的最小值</td>
   </tr>
   <tr class="calibre18">
      <td class="calibre19">SUM()</td>
      <td class="calibre19">返回某列值之和</td>
   </tr>
</table>

<p class="calibre2">以下说明各函数的使用。 </p>
<h3 class="calibre7" id="nav_point_68">9.1.1  AVG()函数</h3><p class="calibre2"><code class="calibre11">AVG()</code>通过对表中行数计数并计算其列值之和，求得该列的平均值。<code class="calibre11">AVG()</code>可用来返回所有列的平均值，也可以用来返回特定列或行的平均值。</p>

<p class="calibre2">下面的例子使用<code class="calibre11">AVG()</code>返回<code class="calibre11">Products</code>表中所有产品的平均价格：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">SELECT AVG(prod_price) AS avg_price
FROM Products;
</code></pre>

<p class="calibre2"><strong class="calibre3">输出▼</strong></p>

<pre class="calibre10"><code class="calibre11">avg_price
-------------
6.823333 
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
此<code class="calibre11">SELECT</code>语句返回值<code class="calibre11">avg_price</code>，它包含<code class="calibre11">Products</code>表中所有产品的平均价格。如第7课所述，<code class="calibre11">avg_price</code>是一个别名。</p>

<p class="calibre2"><code class="calibre11">AVG()</code>也可以用来确定特定列或行的平均值。下面的例子返回特定供应商所提供产品的平均价格：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">SELECT AVG(prod_price) AS avg_price
FROM Products
WHERE vend_id = 'DLL01';
</code></pre>

<p class="calibre2"><strong class="calibre3">输出▼</strong></p>

<pre class="calibre10"><code class="calibre11">avg_price
-----------
3.8650 
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
这条<code class="calibre11">SELECT</code>语句与前一条的不同之处在于，它包含了<code class="calibre11">WHERE</code>子句。此<code class="calibre11">WHERE</code>子句仅过滤出<code class="calibre11">vend_id</code>为<code class="calibre11">DLL01</code>的产品，因此<code class="calibre11">avg_price</code>中返回的值只是该供应商产品的平均值。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">警告：只用于单个列</strong><br class="calibre14"/>
  <strong class="calibre3">AVG()</strong>只能用来确定特定数值列的平均值，而且列名必须作为函数参数给出。为了获得多个列的平均值，必须使用多个<code class="calibre11">AVG()</code>函数。</p>
</blockquote>

<p class="calibre2"></p><p class="calibre2"></p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">说明：<code class="calibre11">NULL</code>值</strong><br class="calibre14"/>
  <code class="calibre11">AVG()</code>函数忽略列值为<code class="calibre11">NULL</code>的行。</p>
</blockquote>
<h3 class="calibre7" id="nav_point_69">9.1.2  COUNT()函数</h3><p class="calibre2"><code class="calibre11">COUNT()</code>函数进行计数。可利用<code class="calibre11">COUNT()</code>确定表中行的数目或符合特定条件的行的数目。</p>

<p class="calibre2"><code class="calibre11">COUNT()</code>函数有两种使用方式：</p>

<ul class="calibre8">
<li class="calibre9">使用<code class="calibre11">COUNT(*)</code>对表中行的数目进行计数，不管表列中包含的是空值（<code class="calibre11">NULL</code>）还是非空值。</li>
<li class="calibre9">使用<code class="calibre11">COUNT(column)</code>对特定列中具有值的行进行计数，忽略<code class="calibre11">NULL</code>值。</li>
</ul>

<p class="calibre2">下面的例子返回<code class="calibre11">Customers</code>表中顾客的总数：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">SELECT COUNT(*) AS num_cust
FROM Customers;
</code></pre>

<p class="calibre2"><strong class="calibre3">输出▼</strong></p>

<pre class="calibre10"><code class="calibre11">num_cust
--------
5 
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
在此例子中，利用<code class="calibre11">COUNT(*)</code>对所有行计数，不管行中各列有什么值。计数值在<code class="calibre11">num_cust</code>中返回。</p>

<p class="calibre2">下面的例子只对具有电子邮件地址的客户计数：  </p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">SELECT COUNT(cust_email) AS num_cust
FROM Customers; 
</code></pre>

<p class="calibre2"><strong class="calibre3">输出▼</strong></p>

<pre class="calibre10"><code class="calibre11">num_cust
--------
3 
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
这条<code class="calibre11">SELECT</code>语句使用<code class="calibre11">COUNT(cust_email)</code>对<code class="calibre11">cust_email</code>列中有值的行进行计数。在此例子中，<code class="calibre11">cust_email</code>的计数为<code class="calibre11">3</code>（表示5个顾客中只有3个顾客有电子邮件地址）。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">说明：<code class="calibre11">NULL</code>值</strong><br class="calibre14"/>
  如果指定列名，则<code class="calibre11">COUNT()</code>函数会忽略指定列的值为空的行，但如果<code class="calibre11">COUNT()</code>函数中用的是星号（<code class="calibre11">*</code>），则不忽略。</p>
</blockquote>
<h3 class="calibre7" id="nav_point_70">9.1.3  MAX()函数</h3><p class="calibre2"><code class="calibre11">MAX()</code>返回指定列中的最大值。<code class="calibre11">MAX()</code>要求指定列名，如下所示：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">SELECT MAX(prod_price) AS max_price
FROM Products;
</code></pre>

<p class="calibre2"><strong class="calibre3">输出▼</strong></p>

<pre class="calibre10"><code class="calibre11">max_price
----------
11.9900
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
这里，<code class="calibre11">MAX()</code>返回<code class="calibre11">Products</code>表中最贵物品的价格。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">提示：对非数值数据使用<code class="calibre11">MAX()</code></strong><br class="calibre14"/>
  虽然<code class="calibre11">MAX()</code>一般用来找出最大的数值或日期值，但许多（并非所有）DBMS允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，<code class="calibre11">MAX()</code>返回按该列排序后的最后一行。</p>
</blockquote>

<p class="calibre2"></p><p class="calibre2"></p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">说明：<code class="calibre11">NULL</code>值</strong><br class="calibre14"/>
  <code class="calibre11">MAX()</code>函数忽略列值为<code class="calibre11">NULL</code>的行。</p>
</blockquote>
<h3 class="calibre7" id="nav_point_71">9.1.4  MIN()函数</h3><p class="calibre2"><code class="calibre11">MIN()</code>的功能正好与<code class="calibre11">MAX()</code>功能相反，它返回指定列的最小值。与<code class="calibre11">MAX()</code>一样，<code class="calibre11">MIN()</code>要求指定列名，如下所示：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">SELECT MIN(prod_price) AS min_price
FROM Products;
</code></pre>

<p class="calibre2"><strong class="calibre3">输出▼</strong></p>

<pre class="calibre10"><code class="calibre11">min_price
----------
3.4900
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
其中<code class="calibre11">MIN()</code>返回<code class="calibre11">Products</code>表中最便宜物品的价格。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">提示：对非数值数据使用<code class="calibre11">MIN()</code></strong><br class="calibre14"/>
  虽然<code class="calibre11">MIN()</code>一般用来找出最小的数值或日期值，但许多（并非所有）DBMS允许将它用来返回任意列中的最小值，包括返回文本列中的最小值。在用于文本数据时，<code class="calibre11">MIN()</code>返回该列排序后最前面的行。</p>
</blockquote>

<p class="calibre2"></p><p class="calibre2">　</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">说明：<code class="calibre11">NULL</code>值</strong><br class="calibre14"/>
  <code class="calibre11">MIN()</code>函数忽略列值为<code class="calibre11">NULL</code>的行。</p>
</blockquote>
<h3 class="calibre7" id="nav_point_72">9.1.5  SUM()函数</h3><p class="calibre2"><code class="calibre11">SUM()</code>用来返回指定列值的和（总计）。下面举一个例子，<code class="calibre11">OrderItems</code>包含订单中实际的物品，每个物品有相应的数量。可如下检索所订购物品的总数（所有<code class="calibre11">quantity</code>值之和）：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">SELECT SUM(quantity) AS items_ordered
FROM OrderItems
WHERE order_num = 20005;
</code></pre>

<p class="calibre2"><strong class="calibre3">输出▼</strong></p>

<pre class="calibre10"><code class="calibre11">items_ordered
----------
200 
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
函数<code class="calibre11">SUM(quantity)</code>返回订单中所有物品数量之和，<code class="calibre11">WHERE</code>子句保证只统计某个物品订单中的物品。</p>

<p class="calibre2"><code class="calibre11">SUM()</code>也可以用来合计计算值。在下面的例子中，合计每项物品的<code class="calibre11">item_price*quantity</code>，得出总的订单金额：  </p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">SELECT SUM(item_price*quantity) AS total_price
FROM OrderItems
WHERE order_num = 20005;
</code></pre>

<p class="calibre2"><strong class="calibre3">输出▼</strong></p>

<pre class="calibre10"><code class="calibre11">total_price
----------
1648.0000
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
函数<code class="calibre11">SUM(item_price*quantity)</code>返回订单中所有物品价钱之和，<code class="calibre11">WHERE</code>子句同样保证只统计某个物品订单中的物品。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">提示：在多个列上进行计算</strong><br class="calibre14"/>
  如本例所示，利用标准的算术操作符，所有聚集函数都可用来执行多个列上的计算。</p>
</blockquote>

<p class="calibre2"></p><p class="calibre2">　</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">说明：<code class="calibre11">NULL</code>值</strong><br class="calibre14"/>
  <code class="calibre11">SUM()</code>函数忽略列值为<code class="calibre11">NULL</code>的行。</p>
</blockquote>
</body>
</html>
