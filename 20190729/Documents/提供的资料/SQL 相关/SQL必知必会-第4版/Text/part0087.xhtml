<?xml version="1.0" encoding="UTF-8"?>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>未知</title>
    <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <link href="../Styles/style0002.css" rel="stylesheet" type="text/css"/>
<link href="../Styles/style0001.css" rel="stylesheet" type="text/css"/>
</head>
  <body class="calibre">
<h2 class="calibre15" id="nav_point_127">17.1  创建表</h2><p class="calibre2">SQL不仅用于表数据操纵，还用来执行数据库和表的所有操作，包括表本身的创建和处理。</p>

<p class="calibre2">一般有两种创建表的方法：</p>

<ul class="calibre8">
<li class="calibre9">多数DBMS都具有交互式创建和管理数据库表的工具；</li>
<li class="calibre9">表也可以直接用SQL语句操纵。</li>
</ul>

<p class="calibre2">用程序创建表，可以使用SQL的<code class="calibre11">CREATE TABLE</code>语句。需要注意的是，使用交互式工具时实际上就是使用SQL语句。这些语句不是用户编写的，界面工具会自动生成并执行相应的SQL语句（更改已有的表时也是这样）。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">警告：语法差别</strong><br class="calibre14"/>
  在不同的SQL实现中，<code class="calibre11">CREATE TABLE</code>语句的语法可能有所不同。对于具体的DBMS支持何种语法，请参阅相应的文档。</p>
</blockquote>

<p class="calibre2">这一课不会介绍创建表时可以使用的所有选项，那超出了本课的范围，我只给出一些基本选项。详细的信息说明，请参阅具体的DBMS文档。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">说明：DBMS创建表的具体例子</strong><br class="calibre14"/>
  关于DBMS的<code class="calibre11">CREATE TABLE</code>语句的具体例子，请参阅附录A中给出的样例表创建脚本。</p>
</blockquote>
<h3 class="calibre7" id="nav_point_128">17.1.1  表创建基础</h3><p class="calibre2">利用<code class="calibre11">CREATE TABLE</code>创建表，必须给出下列信息：</p>

<ul class="calibre8">
<li class="calibre9">新表的名字，在关键字<code class="calibre11">CREATE TABLE</code>之后给出；</li>
<li class="calibre9">表列的名字和定义，用逗号分隔；</li>
<li class="calibre9">有的DBMS还要求指定表的位置。</li>
</ul>

<p class="calibre2">下面的SQL语句创建本书中所用的<code class="calibre11">Products</code>表：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">CREATE TABLE Products
(
    prod_id       CHAR(10)          NOT NULL,
    vend_id       CHAR(10)          NOT NULL,
    prod_name     CHAR(254)         NOT NULL,
    prod_price    DECIMAL(8,2)      NOT NULL,
    prod_desc     VARCHAR(1000)     NULL
);
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
从上面的例子可以看到，表名紧跟<code class="calibre11">CREATE TABLE</code>关键字。实际的表定义（所有列）括在圆括号之中，各列之间用逗号分隔。这个表由5列组成。每列的定义以列名（它在表中必须是唯一的）开始，后跟列的数据类型（关于数据类型的解释，请参阅第1课。此外，附录D列出了常见的数据类型及兼容性）。整条语句以圆括号后的分号结束。</p>

<p class="calibre2">前面提到，不同DBMS的<code class="calibre11">CREATE TABLE</code>的语法有所不同，这个简单脚本也说明了这一点。这条语句在Oracle、PostgreSQL、SQL Server和SQLite中有效，而对于MySQL，<code class="calibre11">varchar</code>必须替换为<code class="calibre11">text</code>；对于DB2，必须从最后一列中去掉<code class="calibre11">NULL</code>。这就是对于不同的DBMS，要编写不同的表创建脚本的原因（参见附录A）。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">提示：语句格式化</strong><br class="calibre14"/>
  回想一下在SQL语句中忽略的空格。语句可以在一个长行上输入，也可以分成许多行，它们没有差别。这样，你就可以用最适合自己的方式安排语句的格式。前面的<code class="calibre11">CREATE TABLE</code>语句就是SQL语句格式化的一个好例子，代码安排在多个行上，列定义进行了恰当的缩进，更易阅读和编辑。以何种格式安排SQL语句并没有规定，但我强烈推荐采用某种缩进格式。</p>
</blockquote>

<p class="calibre2"></p><p class="calibre2"></p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">提示：替换现有的表</strong><br class="calibre14"/>
  在创建新的表时，指定的表名必须不存在，否则会出错。防止意外覆盖已有的表，SQL要求首先手工删除该表（请参阅后面的内容），然后再重建它，而不是简单地用创建表语句覆盖它。</p>
</blockquote>
<h3 class="calibre7" id="nav_point_129">17.1.2  使用NULL值</h3><p class="calibre2">第4课提到，<code class="calibre11">NULL</code>值就是没有值或缺值。允许<code class="calibre11">NULL</code>值的列也允许在插入行时不给出该列的值。不允许<code class="calibre11">NULL</code>值的列不接受没有列值的行，换句话说，在插入或更新行时，该列必须有值。</p>

<p class="calibre2">每个表列要么是<code class="calibre11">NULL</code>列，要么是<code class="calibre11">NOT NULL</code>列，这种状态在创建时由表的定义规定。请看下面的例子：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">CREATE TABLE Orders
(
    order_num      INTEGER      NOT NULL,
    order_date     DATETIME     NOT NULL,
    cust_id        CHAR(10)     NOT NULL
);
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong>
这条语句创建本书中所用的<code class="calibre11">Orders</code>表。<code class="calibre11">Orders</code>包含三列：订单号、订单日期和顾客ID。这三列都需要，因此每一列的定义都含有关键字<code class="calibre11">NOT NULL</code>。这就会阻止插入没有值的列。如果插入没有值的列，将返回错误，且插入失败。</p>

<p class="calibre2">下一个例子将创建混合了<code class="calibre11">NULL</code>和<code class="calibre11">NOT NULL</code>列的表：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">CREATE TABLE Vendors
(
    vend_id          CHAR(10)     NOT NULL,
    vend_name        CHAR(50)     NOT NULL,
    vend_address     CHAR(50)     ,
    vend_city        CHAR(50)     ,
    vend_state       CHAR(5)      ,
    vend_zip         CHAR(10)     ,
    vend_country     CHAR(50)
);
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
这条语句创建本书中使用的<code class="calibre11">Vendors</code>表。供应商ID和供应商名字列是必需的，因此指定为<code class="calibre11">NOT NULL</code>。其余五列全都允许<code class="calibre11">NULL</code>值，所以不指定<code class="calibre11">NOT NULL</code>。<code class="calibre11">NULL</code>为默认设置，如果不指定<code class="calibre11">NOT NULL</code>，就认为指定的是<code class="calibre11">NULL</code>。</p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">警告：指定<code class="calibre11">NULL</code></strong><br class="calibre14"/>
  在不指定<code class="calibre11">NOT NULL</code>时，多数DBMS认为指定的是<code class="calibre11">NULL</code>，但不是所有的DBMS都这样。DB2要求指定关键字<code class="calibre11">NULL</code>，如果不指定将出错。关于完整的语法信息，请参阅具体的DBMS文档。</p>
</blockquote>

<p class="calibre2"></p><p class="calibre2"></p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">提示：主键和<code class="calibre11">NULL</code>值</strong><br class="calibre14"/>
  第1课介绍过，主键是其值唯一标识表中每一行的列。只有不允许<code class="calibre11">NULL</code>值的列可作为主键，允许<code class="calibre11">NULL</code>值的列不能作为唯一标识。</p>
</blockquote>

<p class="calibre2"></p><p class="calibre2"></p>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">警告：理解<code class="calibre11">NULL</code></strong><br class="calibre14"/>
  不要把<code class="calibre11">NULL</code>值与空字符串相混淆。<code class="calibre11">NULL</code>值是没有值，不是空字符串。如果指定<code class="calibre11">''</code>（两个单引号，其间没有字符），这在<code class="calibre11">NOT NULL</code>列中是允许的。空字符串是一个有效的值，它不是无值。<code class="calibre11">NULL</code>值用关键字<code class="calibre11">NULL</code>而不是空字符串指定。</p>
</blockquote>
<h3 class="calibre7" id="nav_point_130">17.1.3  指定默认值</h3><p class="calibre2">SQL允许指定默认值，在插入行时如果不给出值，DBMS将自动采用默认值。默认值在<code class="calibre11">CREATE TABLE</code>语句的列定义中用关键字<code class="calibre11">DEFAULT</code>指定。</p>

<p class="calibre2">请看下面的例子：</p>

<p class="calibre2"><strong class="calibre3">输入▼</strong></p>

<pre class="calibre10"><code class="calibre11">CREATE TABLE OrderItems
(
    order_num      INTEGER          NOT NULL,
    order_item     INTEGER          NOT NULL,
    prod_id        CHAR(10)         NOT NULL,
    quantity       INTEGER          NOT NULL      DEFAULT 1,
    item_price     DECIMAL(8,2)     NOT NULL
);
</code></pre>

<p class="calibre2"><strong class="calibre3">分析▼</strong><br class="calibre14"/>
这条语句创建<code class="calibre11">OrderItems</code>表，包含构成订单的各项（订单本身存储在<code class="calibre11">Orders</code>表中）。<code class="calibre11">quantity</code>列为订单中每个物品的数量。在这个例子中，这一列的描述增加了<code class="calibre11">DEFAULT 1</code>，指示DBMS，如果不给出数量则使用数量<code class="calibre11">1</code>。</p>

<p class="calibre2">默认值经常用于日期或时间戳列。例如，通过指定引用系统日期的函数或变量，将系统日期用作默认日期。MySQL用户指定<code class="calibre11">DEFAULT CURRENT_DATE()</code>，Oracle用户指定<code class="calibre11">DEFAULT SYSDATE</code>，而SQL Server用户指定<code class="calibre11">DEFAULT GETDATE()</code>。遗憾的是，这条获得系统日期的命令在不同的DBMS中几乎都是不同的。表17-1列出了这条命令在某些DBMS中的语法。这里若未列出某个DBMS，请参阅相应的文档。</p>

<p class="calibre2"><strong class="calibre3">表17-1  获得系统日期</strong>  </p>

<table class="table">
   <tr class="calibre16">
      <th class="calibre17">DBMS</th>
      <th class="calibre17">函数/变量</th>
   </tr>
   <tr class="calibre18">
      <td class="calibre19">Access</td>
      <td class="calibre19">NOW()</td>
   </tr>
   <tr class="calibre16">
      <td class="calibre19">DB2</td>
      <td class="calibre19">CURRENT_DATE</td>
   </tr>
   <tr class="calibre18">
      <td class="calibre19">MySQL</td>
      <td class="calibre19">CURRENT_DATE()</td>
   </tr>
   <tr class="calibre16">
      <td class="calibre19">Oracle</td>
      <td class="calibre19">SYSDATE</td>
   </tr>
   <tr class="calibre18">
      <td class="calibre19">PostgreSQL</td>
      <td class="calibre19">CURRENT_DATE</td>
   </tr>
   <tr class="calibre16">
      <td class="calibre19">SQL Server</td>
      <td class="calibre19">GETDATE()</td>
   </tr>
 <tr class="calibre18">
      <td class="calibre19">SQLite</td>
      <td class="calibre19">date('now')</td>
   </tr>
   <tr class="calibre16">
   </tr>
</table>

<blockquote class="calibre13">
  <p class="calibre2"><strong class="calibre3">提示：使用<code class="calibre11">DEFAULT</code>而不是<code class="calibre11">NULL</code>值</strong><br class="calibre14"/>
  许多数据库开发人员喜欢使用<code class="calibre11">DEFAULT</code>值而不是<code class="calibre11">NULL</code>列，对于用于计算或数据分组的列更是如此。</p>
</blockquote>
</body>
</html>
